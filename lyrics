#!/usr/bin/env python

# lyrics
# http://github.com/tremby/py-lyrics
#
# Patches are welcome
# Python script making use of LyricWiki (lyrics.wikia.com) to pull lyrics from 
# the web from the commandline
#
# Copyright 2009~2012 Bart Nagel (bart@tremby.net)
#
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with 
# this program. If not, see <http://www.gnu.org/licenses/>.

import urllib
import sys
import os
import re
import subprocess
import lxml.html

def usage(stdout = False):
	if stdout:
		stream = sys.stdout
	else:
		stream = sys.stderr

	bin = os.path.basename(progname)
	indent = " " * (len(bin) + len("Usage: "))

	print >> stream, "Usage: " + os.path.basename(progname) + " [--help|-h]"
	print >> stream, indent + " [--suppresstitle|-s]"
	print >> stream, indent + " [--output|--viewurl|--view|--editurl|--edit]"
	print >> stream, indent + " [artist song]"
	print >> stream, """
Get data from lyrics.wikia.com for a particular song. If the artist and song are 
not given as arguments the currently playing song is taken from MPD or Rhythmbox 
(in that order of preference).

Modes:
	--output	Output the lyrics as plain text to stdout (default)
	--viewurl	Get the URL of the lyrics page
	--view		Open a browser at that lyrics page
	--editurl	Get the URL of the edit lyrics page
	--edit		Open a browser at that edit lyrics page

Options:
	--supresstitle, -s	Don't output the artist name and song title

To open a browser, sensible-browser is used."""

def lyricwikicase(s):
	words = s.split()
	newwords = []
	for word in words:
		newwords.append(word[0].capitalize() + word[1:])
	s = "_".join(newwords)
	s = s.replace("<", "Less_Than")
	s = s.replace(">", "Greater_Than")
	s = s.replace("#", "Number_")
	s = s.replace("[", "(")
	s = s.replace("]", ")")
	s = s.replace("{", "(")
	s = s.replace("}", ")")
	s = urllib.urlencode([(0, s)])[2:]
	return s

# determine whether an executable exists
def executableexists(program):
	def isexe(fpath):
		return os.path.exists(fpath) and os.access(fpath, os.X_OK)
	for path in os.environ["PATH"].split(os.pathsep):
		exefile = os.path.join(path, program)
		if isexe(exefile):
			return True
	return False

# get commandline arguments
nomoreoptions = False
suppresstitle = False
artist = None
title = None
mode = "output"
progname = sys.argv.pop(0)
while len(sys.argv):
	arg = sys.argv.pop(0)
	if arg == "--":
		nomoreoptions = True
		continue
	if not nomoreoptions and arg[0] == "-":
		if arg == "--help" or arg == "-h":
			usage(True)
			sys.exit(0)
		elif arg == "--suppresstitle" or arg == "-s":
			suppresstitle = True
			continue
		elif arg == "--output" or arg == "--viewurl" or arg == "--view" or arg == "--editurl" or arg == "--edit":
			mode = arg[2:]
			continue
		else:
			print >> sys.stderr, "Unknown option \"%s\"" % arg
	elif artist is None:
		artist = arg
		continue
	elif title is None:
		title = arg
		continue
	else:
		print >> sys.stderr, "Unexpected argument \"%s\" since we already have artist and title. Make sure they are quoted." % arg
	usage()
	sys.exit(127)

# error checking
if artist is not None and title is None:
	print >> sys.stderr, "Got artist but not title"
	usage()
	sys.exit(127)

# get currently playing song if one wasn't on the commandline
# MPD
if title is None and executableexists("mpc"):
	output = subprocess.Popen(["mpc"], stdout=subprocess.PIPE).communicate()[0].split("\n")
	if not output[0][0:8] == "volume: ":
		(artist, title) = output[0].split(" - ", 1)

# Rhythmbox
if title is None and executableexists("rhythmbox-client"):
	output = subprocess.Popen(["rhythmbox-client", "--no-start", "--print-playing"], stdout=subprocess.PIPE).communicate()[0]
	if len(output) > 0 and not output == "Not playing\n":
		(artist, title) = output.split(" - ", 1)

if title is None:
	print >> sys.stderr, "No song is currently playing"
	sys.exit(1)

# construct wiki page name
pagename = lyricwikicase(artist) + ":" + lyricwikicase(title)

# do our action
if mode == "output":
	try:
		doc = lxml.html.parse("http://lyrics.wikia.com/index.php?title=%s" % pagename)
	except IOError:
		print >> sys.stderr, "Lyrics not found"
		sys.exit(4)

	try:
		lyricbox = doc.getroot().cssselect(".lyricbox")[0]
	except IndexError:
		print >> sys.stderr, "No lyrics tag"
		sys.exit(2)

	lyrics = []
	if lyricbox.text is not None:
		lyrics.append(lyricbox.text)
	for node in lyricbox:
		if str(node.tag).lower() == "br":
			lyrics.append("\n")
		if node.tail is not None:
			lyrics.append(node.tail)
	lyrics = "".join(lyrics).strip()

	# instrumental?
	instrumental = False
	if not lyrics.lower().find("{{instrumental}}") == -1:
		instrumental = True

	# prepare output
	output = []
	if not suppresstitle:
		output.append("%s -- %s" % (artist, title))
		output.append("")
	if instrumental:
		output.append("(instrumental)")
	else:
		if len(lyrics) and not lyrics.isspace():
			output.append(lyrics)
	output = "\n".join(output)

	# TODO: allow encoding to be chosen as an option

	# detect output type, encode as necessary
	if sys.stdout.isatty():
		try:
			print output
		except UnicodeEncodeError:
			print >>sys.stderr, "warning: could not encode to tty's encoding " \
					"'%s'; some characters are replaced" % sys.stdout.encoding
			print output.encode(sys.stdout.encoding, "replace")
	else:
		print output.encode("utf-8")

	sys.exit(0)

if mode[0:4] == "view":
	url = "http://lyrics.wikia.com/" + pagename
else:
	url = "http://lyrics.wikia.com/index.php?title=" + pagename + "&action=edit"

if mode[4:] == "url":
	print url
else:
	subprocess.Popen(["sensible-browser", url])

sys.exit(0)
